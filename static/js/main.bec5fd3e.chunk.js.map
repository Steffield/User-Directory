{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Table/Table.js","utils/API.js","components/Search/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","value","search","onChange","handleInputChange","type","aria-label","name","list","id","placeholder","natSearch","defaultValue","style","color","backgroundColor","boxShadow","onClick","handleFormSubmit","handleFormClear","Jumbotron","sortTypes","up","sortFct","a","b","last","down","default","Table","state","currentSort","onSortChange","nextSort","setState","persons","this","length","scope","sort","map","person","i","key","email","alt","src","picture","medium","first","phone","nat","Component","query","axios","get","BaseURL","SearchResultContainer","searchEmployeesNat","API","then","res","data","results","catch","err","console","log","event","target","preventDefault","filteredPeople","cleanSearchVal","trim","toLowerCase","filter","p","includes","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wTA0BA,SAASA,EAAYC,GACnB,OAEE,yBAAKC,UAAU,aACb,0BAAMA,UAAU,UAGd,yBAAKA,UAAU,sCAGb,2BAAOC,QAAQ,SAASD,UAAU,QAAlC,mBACA,2BACEE,MAAOH,EAAMI,OACbC,SAAUL,EAAMM,kBAChBL,UAAU,uCACVM,KAAK,OACLC,aAAW,SAEXC,KAAK,SACLC,KAAK,UACLC,GAAG,SACHC,YAAY,oBAKd,2BAAOV,QAAQ,YAAYD,UAAU,QAArC,mBACA,4BAAQQ,KAAK,YAAYN,MAAOH,EAAMa,UAAWR,SAAUL,EAAMM,kBAAmBL,UAAU,qBAC5F,4BAAQa,aAAc,eAAtB,eACA,4BAAQX,MAAO,MAAf,OACA,4BAAQA,MAAO,MAAf,WACA,4BAAQA,MAAO,MAAf,eACA,4BAAQA,MAAO,MAAf,kBAIF,4BAAQF,UAAU,wBAAwBM,KAAK,SAASE,KAAK,SAASM,MAAO,CAACC,MAAM,UAAWC,gBAAgB,UAAWC,UAAU,sBAClIC,QAASnB,EAAMoB,kBAEf,uBAAGnB,UAAW,kBAGhB,4BAAQA,UAAU,mBAAmBM,KAAK,QAAQE,KAAK,QAAQM,MAAO,CAACC,MAAM,UAAWC,gBAAgB,UAAWC,UAAU,sBAC7HC,QAASnB,EAAMqB,iBACb,uBAAGpB,UAAW,mBASXqB,MA3Ef,SAAmBtB,GACjB,OACE,yBAAKC,UAAU,YAAYc,MAAO,CAACE,gBAAiB,UAAWD,MAAO,UACpE,yBAAKf,UAAU,yBACb,wBAAIA,UAAU,aAAd,sBAEA,uBAAGA,UAAU,QAAb,qJAEF,6BACA,kBAACF,EAAD,CACEc,UAAWb,EAAMa,UACjBT,OAAQJ,EAAMI,OACdgB,iBAAkBpB,EAAMoB,iBACxBd,kBAAmBN,EAAMM,kBACzBe,gBAAiBrB,EAAMqB,oB,QCdzBE,G,MAAY,CAChBC,GAAI,CACFvB,UAAW,UACXwB,QAAS,SAACC,EAAGC,GAAJ,OAAUD,EAAEjB,KAAKmB,KAAOD,EAAElB,KAAKmB,KAAO,GAAI,IAErDC,KAAM,CACJ5B,UAAW,YACXwB,QAAS,SAACC,EAAGC,GAAJ,OAAUD,EAAEjB,KAAKmB,KAAOD,EAAElB,KAAKmB,KAAO,GAAI,IAErDE,QAAS,CACP7B,UAAW,OACXwB,QAAS,SAACC,EAAGC,GAAJ,OAAUD,MAuERK,E,4MAjEbC,MAAO,CACLC,YAAa,W,EAKjBC,aAAe,WAAO,IAEhBC,EADIF,EAAgB,EAAKD,MAArBC,YAGa,SAAhBA,EAAyBE,EAAW,KAChB,OAAhBF,EAAsBE,EAAW,UACjB,YAAhBF,IAA2BE,EAAW,QAE/C,EAAKC,SAAS,CACZH,YAAaE,K,uDAIP,IAEAE,EAAYC,KAAKtC,MAAjBqC,QACAJ,EAAgBK,KAAKN,MAArBC,YAER,OACEI,EAAQE,OACN,yBAAKtC,UAAU,mBACZ,2BAAOA,UAAU,6CAChB,+BACE,4BACE,wBAAIuC,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACE,4BAAQvC,UAAU,uBAAuBkB,QAASmB,KAAKJ,cACrD,uBAAGjC,UAAS,gBAAWsB,EAAUU,GAAahC,eAGlD,wBAAIuC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,qBAKJ,+BAEG,YAAIH,GAASI,KAAKlB,EAAUU,GAAaR,SAASiB,KAAI,SAACC,EAAQC,GAAT,OAErD,wBAAIC,IAAKF,EAAOG,OACd,wBAAInC,GAAE,cAASiC,IAAK,yBAAKG,IAAKH,EAAGI,IAAKL,EAAOM,QAAQC,UACrD,4BAAKP,EAAOlC,KAAK0C,OACjB,4BAAKR,EAAOlC,KAAKmB,MACjB,4BAAKe,EAAOG,OACZ,4BAAKH,EAAOS,OACZ,4BAAKT,EAAOU,IAAZ,kBAOP,yBAAKpD,UAAU,+BAAf,yC,GA9DWqD,a,iBCbL,EACL,SAASC,GACf,OAAOC,IAAMC,IAAIC,uGAA8CH,ICoEpDI,E,kDArEb,WAAY3D,GAAO,IAAD,8BAChB,cAAMA,IAgBR4D,mBAAqB,SAAAL,GACnBM,EAAWN,GAERO,MAAK,SAAAC,GAAG,OAAI,EAAK3B,SAAS,CAAEC,QAAS0B,EAAIC,KAAKC,aAC9CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OArBZ,EAwBlB7D,kBAAoB,SAAAgE,GAClB,IAAM7D,EAAO6D,EAAMC,OAAO9D,KACpBN,EAAQmE,EAAMC,OAAOpE,MAE3B,EAAKiC,SAAL,eACG3B,EAAON,KA7BM,EAkClBiB,iBAAmB,SAAAkD,GACjBA,EAAME,iBACN,EAAKZ,mBAAmB,EAAK5B,MAAMnB,YApCnB,EAwClBQ,gBAAkB,WAChB+C,QAAQC,IAAI,EAAKrC,MAAMnB,WACvB,EAAKuB,SAAS,CACZvB,UAAW,cACXT,OAAQ,MA1CV,EAAK4B,MAAQ,CACX5B,OAAQ,GACRS,UAAW,cACXwB,QAAS,GACToC,eAAgB,IANF,E,gEAchBnC,KAAKsB,mBAAmB,iB,+BAoCxB,IAAMc,EAAiBpC,KAAKN,MAAM5B,OAAOuE,OAAOC,cAC1CH,EAAiBC,EAAiBpC,KAAKN,MAAMK,QAAQwC,QAAO,SAAAC,GAEhE,MADiB,UAAGA,EAAErE,KAAK0C,OAAV,OAAkB2B,EAAErE,KAAKmB,KAAzB,KAAiCgD,cAClCG,SAASL,MACtBpC,KAAKN,MAAMK,QAEhB,OACE,6BACE,kBAAC,EAAD,CAAWxB,UAAWyB,KAAKN,MAAMnB,UAAWT,OAAQkC,KAAKN,MAAM5B,OAAQgB,iBAAkBkB,KAAKlB,iBAC5Fd,kBAAmBgC,KAAKhC,kBAAmBe,gBAAiBiB,KAAKjB,kBACnE,kBAAC,EAAD,CACEgB,QAASoC,S,GA9DiBO,IAAM1B,WCK3B2B,MAPf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.bec5fd3e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Jumbotron.css\";\n\n//props I will use:  {natSearch, search, handleFormSubmit, handleInputChange, handleFormClear}\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron\" style={{backgroundColor: \"#94778B\", color: \"white\"}}>\n      <div className=\"container text-center\" >\n        <h1 className=\"display-4\">Employee Directory</h1>\n       \n        <p className=\"lead\">Employees can be sorted by last name, the search box can be used to search for a certain name and employees can be filtered by office location. </p>\n      </div>\n      <hr></hr>\n      <SearchForm \n        natSearch={props.natSearch} \n        search={props.search}\n        handleFormSubmit={props.handleFormSubmit}\n        handleInputChange={props.handleInputChange}\n        handleFormClear={props.handleFormClear}\n        />\n       \n    </div>\n  );\n}\n\n// props I will use: {search, handleInputChange, natSearch, handleFormSubmit, handleFormClear}\nfunction SearchForm (props) {\n  return (\n\n    <div className=\"container\">\n      <form className=\"search\" \n      // onSubmit={handleFormSubmit}\n      >\n        <div className=\"form-inline justify-content-center\">\n\n          {/* employee by last name  */}\n          <label htmlFor=\"search\" className=\"mr-2\">Search Employee</label>\n          <input \n            value={props.search}\n            onChange={props.handleInputChange}\n            className=\"form-control mr-5 align-items-center\" \n            type=\"text\"  \n            aria-label=\"Search\" \n            // style={{boxShadow:\"inset 0 0 3px gray\"}}\n            name=\"search\"\n            list=\"persons\"\n            id=\"search\"\n            placeholder=\"Search employee\"\n          />\n\n\n          {/* filter by nationality */}\n          <label htmlFor=\"natSearch\" className=\"mr-2\">Office Location</label>\n          <select name=\"natSearch\" value={props.natSearch} onChange={props.handleInputChange} className=\"form-control mr-5\">\n            <option defaultValue =\"us,gb,nz,de\">All Offices</option>\n            <option value =\"us\">USA</option>\n            <option value =\"de\">Germany</option> \n            <option value =\"nz\">New Zealand</option>\n            <option value =\"gb\">Great Britain</option>\n          </select>\n        \n          {/* Submit and Clear Button */}\n          <button className=\"btn my-2 my-sm-0 mr-2\" type=\"submit\" name=\"submit\" style={{color:\"#565656\", backgroundColor:\"#f0ebee\", boxShadow:\"inset 0 0 5px gray\"}}\n            onClick={props.handleFormSubmit}\n            >\n            <i className= \"fa fa-search\"></i>\n          </button>\n\n          <button className=\"btn my-2 my-sm-0\" type=\"reset\" name=\"clear\" style={{color:\"#f0ebee\", backgroundColor:\"#565656\", boxShadow:\"inset 0 0 5px gray\"}}\n          onClick={props.handleFormClear}>\n            <i className= \"fa fa-undo\"></i>\n          </button>  \n        </div>\n      </form>\n    </div>\n\n  )\n}\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\nimport \"./table.css\";\n\n//====== sort by last name and change fontawesome button accordingly======\nconst sortTypes = {\n  up: {\n    className: 'sort-up',\n    sortFct: (a, b) => a.name.last > b.name.last ? 1: -1\n  },\n  down: {\n    className: 'sort-down',\n    sortFct: (a, b) => a.name.last < b.name.last ? 1: -1\n  },\n  default: {\n    className: 'sort',\n    sortFct: (a, b) => a\n  }\n};\n\n//========Table with Data from randomuseapi.me=============\nclass Table extends Component {\n  state ={\n    currentSort: 'default',\n  \n  }; \n\n//function to sort the table by last name\nonSortChange = () => {\n  const { currentSort } = this.state;\n  let nextSort;\n\n  if ( currentSort === \"down\" ) nextSort = \"up\";\n  else if (currentSort === 'up') nextSort = 'default';\n  else if (currentSort === 'default') nextSort = 'down';\n\n  this.setState({\n    currentSort: nextSort\n  });\n};\n\nrender() {\n\n  const { persons } = this.props;\n  const { currentSort } = this.state;\n\n  return (\n    persons.length ? (\n      <div className=\"container-fluid\">\n         <table className=\"table table-striped table-hover text-left\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Picture</th>\n              <th scope=\"col\">First Name</th>\n              <th scope=\"col\"> Last Name\n                <button className=\"btn btn-default ml-2\" onClick={this.onSortChange}>\n                  <i className={`fa fa-${sortTypes[currentSort].className}`} />\n                </button>\n                </th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">Phone</th>\n              <th scope=\"col\">Office Location</th>\n            \n            </tr>\n          </thead>\n\n          <tbody>\n         \n           { [...persons].sort(sortTypes[currentSort].sortFct).map((person, i) =>\n           (\n              <tr key={person.email}>\n                <td id={`IMG-${i}`}><img alt={i} src={person.picture.medium}></img></td>\n                <td>{person.name.first}</td>\n                <td>{person.name.last}</td>\n                <td>{person.email}</td>\n                <td>{person.phone}</td>\n                <td>{person.nat} Office</td>\n              </tr> \n           ))\n          }         \n          </tbody>\n        </table>\n        </div>\n     ) : <div className=\"alert text-center mr-5 ml-5\">No employee found with this name.</div>);\n    }\n}\n\nexport default Table;\n   ","import axios from \"axios\";\n\nconst BaseURL = \"https://randomuser.me/api/?results=\";\nconst wantedResultNumber = \"50\" ;\nconst defaultQuery= \"&seed=2e6577716ac2851f&inc=picture,name,email,phone,nat,id&nat=\";\n\n// Export an object with a \"search\" method that searches the randomuser API for the passed query\nexport default {\n  search: function(query) {\n    return axios.get(BaseURL + wantedResultNumber + defaultQuery + query );\n\n  }\n};\n\n","import React from \"react\";\n// import Search from \"./SearchForm\";\n// import Filter from \"../Search/Filter\";\nimport Jumbotron from \"../Jumbotron/Jumbotron\";\nimport Table from \"../Table/Table\";\nimport API from \"../../utils/API\";\n\nclass SearchResultContainer extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      search: \"\",\n      natSearch: \"us,nz,gb,de\",\n      persons: [],\n      filteredPeople: []\n    };\n\n\n  }\n\n  // When this component mounts, search the randomuser API for employees\n  componentDidMount() {\n    this.searchEmployeesNat(\"us,nz,gb,de\"); \n  }\n\n  searchEmployeesNat = query => {\n    API.search(query)\n    \n      .then(res => this.setState({ persons: res.data.results }))\n      .catch(err => console.log(err));  \n  };\n\n  handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    // console.log(name, value);\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  // When the form is submitted, search the Employees API for `this.state.search`\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.searchEmployeesNat(this.state.natSearch)\n \n}\n\n  handleFormClear = () => {\n    console.log(this.state.natSearch)\n    this.setState({\n      natSearch: \"us,nz,de,gb\",\n      search :\"\"\n    })\n\n  }\n\n  render() {\n    const cleanSearchVal = this.state.search.trim().toLowerCase();\n    const filteredPeople = cleanSearchVal ? this.state.persons.filter(p => {\n      const userData = `${p.name.first}${p.name.last}}`.toLowerCase();\n      return userData.includes(cleanSearchVal);\n    }) : this.state.persons;\n  \n    return (\n      <div>\n        <Jumbotron natSearch={this.state.natSearch} search={this.state.search} handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange} handleFormClear={this.handleFormClear} />\n        <Table \n          persons={filteredPeople}\n          />\n    \n      </div>\n    );\n  }\n}\n\nexport default SearchResultContainer;\n","import React from \"react\";\nimport SearchResultContainer from \"./components/Search/SearchResultContainer\";\n\n\n\nfunction App(){\n  return(\n    <SearchResultContainer  />\n  )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}